{"version":3,"sources":["components/AnswerButton/AnswerButton.js","components/Question/Question.js","components/Countdown/Countdown.js","components/Summary/Summary.js","components/SideContainer/Leaderboard/LeaderboardListItem.js","components/SideContainer/Leaderboard/LeaderboardList.js","components/SideContainer/Leaderboard/Leaderboard.js","components/SideContainer/ActiveGame/Timer.js","components/SideContainer/ActiveGame/ActiveGame.js","App.js","serviceWorker.js","index.js"],"names":["AnswerButton","state","correct","incorrect","answerQuestion","_this","props","changeButtonStatus","choice","correctAnswer","setState","updateScore","stopTimer","setTimeout","loadQuestion","btn_class1","this","btn_class2","react_default","a","createElement","type","disabled","buttonDisabled","onClick","value","decodeURIComponent","className","concat","Component","Question","questionCount","question","AnswerButton_AnswerButton_AnswerButton","pointMultiplier","updatePoints","choice1","choice2","choice3","choice4","Countdown","countdownTimer","startGameTimer","clearInterval","startingInterval","gameStart","_this2","setInterval","e","Summary","localRoute","rank","name","onSubmit","updateTable","fetch","method","headers","Content-Type","body","JSON","stringify","score","then","response","json","newTableData","updateLeaderboard","catch","console","log","localRouteChange","endGame","onNameChange","target","replace","onKeyDown","key","rankTemp","i","leaders","maxLength","onChange","autoFocus","LeaderboardListItem","_ref","LeaderboardList","Leaderboard_LeaderboardListItem","slice","map","user","Leaderboard","length","Leaderboard_LeaderboardList","react_loader_spinner_default","color","height","width","Timer","percent","timer","style","margin","position","top","left","es","strokeWidth","strokeLinecap","strokeColor","ActiveGame","SideContainer_ActiveGame_Timer","App","gameStatus","questionDb","category","difficulty","totalCorrectAnswers","id","handleGameStatusChange","fetchQuestions","restartTimer","startTimer","updatePercent","countdown","x","allAnswers","res","data","results","item","index","correct_answer","incorrect_answers","shuffleQuestions","array","j","Math","floor","random","temp","points","err","_this3","_this$state","Countdown_Countdown_Countdown","Question_Question_Question","Summary_Summary_Summary","SideContainer_ActiveGame_ActiveGame","SideContainer_Leaderboard_Leaderboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0ed09aa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AnswerButton.css';\r\n\r\nexport default class AnswerButton extends Component {\r\n  state = {\r\n    correct: false,\r\n    incorrect: false\r\n  };\r\n\r\n  answerQuestion = () => {\r\n    this.props.changeButtonStatus('disabled');\r\n    if (this.props.choice === this.props.correctAnswer) {\r\n      this.setState({ correct: true });\r\n      this.props.updateScore();\r\n    } else {\r\n      this.setState({ incorrect: true });\r\n    }\r\n    this.props.stopTimer();\r\n    setTimeout(() => {\r\n      this.props.changeButtonStatus('enabled');\r\n      this.setState({ correct: false });\r\n      this.setState({ incorrect: false });\r\n      this.props.loadQuestion();\r\n    }, 2000);\r\n  };\r\n  render() {\r\n    let btn_class1 = this.state.correct ? 'correctAnswer' : 'none';\r\n    let btn_class2 = this.state.incorrect ? 'incorrectAnswer' : 'none';\r\n\r\n    return (\r\n      <input\r\n        type=\"button\"\r\n        disabled={this.props.buttonDisabled}\r\n        onClick={this.answerQuestion}\r\n        value={decodeURIComponent(this.props.choice)}\r\n        className={` btn-answer  ${btn_class1} ${btn_class2} `}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport AnswerButton from '../AnswerButton/AnswerButton';\r\n\r\nimport './Question.css';\r\n\r\nexport default class Question extends Component {\r\n  state = {\r\n    buttonDisabled: false\r\n  };\r\n\r\n  changeButtonStatus = value => {\r\n    if (value === 'disabled') {\r\n      this.setState({ buttonDisabled: true });\r\n    } else {\r\n      this.setState({ buttonDisabled: false });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"question-content\">\r\n        <div className=\"question-header\">\r\n          <h4>QUESTION: {this.props.questionCount} OF 10 </h4>\r\n        </div>\r\n        <div className=\"question-container\">\r\n          <h2>{decodeURIComponent(this.props.question)}</h2>\r\n        </div>\r\n        <div className=\"answer-container\">\r\n          <AnswerButton\r\n            stopTimer={this.props.stopTimer}\r\n            pointMultiplier={this.props.pointMultiplier}\r\n            updatePoints={this.props.updatePoints}\r\n            changeButtonStatus={this.changeButtonStatus}\r\n            buttonDisabled={this.state.buttonDisabled}\r\n            choice={this.props.choice1}\r\n            loadQuestion={this.props.loadQuestion}\r\n            correctAnswer={this.props.correctAnswer}\r\n            updateScore={this.props.updateScore}\r\n          />\r\n          <AnswerButton\r\n            stopTimer={this.props.stopTimer}\r\n            pointMultiplier={this.props.pointMultiplier}\r\n            updatePoints={this.props.updatePoints}\r\n            changeButtonStatus={this.changeButtonStatus}\r\n            buttonDisabled={this.state.buttonDisabled}\r\n            choice={this.props.choice2}\r\n            loadQuestion={this.props.loadQuestion}\r\n            correctAnswer={this.props.correctAnswer}\r\n            updateScore={this.props.updateScore}\r\n          />\r\n          <AnswerButton\r\n            stopTimer={this.props.stopTimer}\r\n            pointMultiplier={this.props.pointMultiplier}\r\n            updatePoints={this.props.updatePoints}\r\n            changeButtonStatus={this.changeButtonStatus}\r\n             buttonDisabled={this.state.buttonDisabled}\r\n            choice={this.props.choice3}\r\n            loadQuestion={this.props.loadQuestion}\r\n            correctAnswer={this.props.correctAnswer}\r\n            updateScore={this.props.updateScore}\r\n          />\r\n          <AnswerButton\r\n            stopTimer={this.props.stopTimer}\r\n            pointMultiplier={this.props.pointMultiplier}\r\n            updatePoints={this.props.updatePoints}\r\n            changeButtonStatus={this.changeButtonStatus}\r\n             buttonDisabled={this.state.buttonDisabled}\r\n            choice={this.props.choice4}\r\n            loadQuestion={this.props.loadQuestion}\r\n            correctAnswer={this.props.correctAnswer}\r\n            updateScore={this.props.updateScore}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Countdown.css';\r\n\r\nexport default class Countdown extends Component {\r\n  state = {\r\n    countdownTimer: 5\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.startingInterval = setInterval(e => this.startGameTimer(), 1000);\r\n  }\r\n\r\n  startGameTimer = () => {\r\n    if (this.state.countdownTimer > 0) {\r\n      this.setState({ countdownTimer: this.state.countdownTimer - 1 });\r\n    } else if (this.state.countdownTimer === 0) {\r\n      clearInterval(this.startingInterval);\r\n      this.setState({ countdownTimer: 20 });\r\n      this.props.gameStart();\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"countdown-content\">\r\n        <h2>Game will start in:</h2>\r\n        <h1>{this.state.countdownTimer}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Summary.css';\r\n\r\nexport default class Summary extends Component {\r\n  state = {\r\n    localRoute: 'score',\r\n    rank: 0,\r\n    name: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    debugger;\r\n    //Compares the rank list with the users current score. Rank is increased if they have higher points.\r\n    this.setState({ localRoute: 'score' });\r\n    let rankTemp = 1;\r\n    for (let i = 0; i <= 7; i++) {\r\n      if (this.props.score < this.props.leaders[i].score) {\r\n        rankTemp = rankTemp + 1;\r\n      }\r\n    }\r\n    this.setState({ rank: rankTemp });\r\n  }\r\n\r\n  onSubmit = () => {\r\n    if (this.state.name === '') {\r\n      return;\r\n    } else {\r\n      this.updateTable();\r\n    }\r\n  };\r\n\r\n  updateTable = () => {\r\n    // Update leaderboard database and update the leaderboard table.\r\n    fetch('https://trivia-app-123.herokuapp.com/leaderboard', {\r\n      method: 'post',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        name: this.state.name,\r\n        score: this.props.score\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(newTableData => {\r\n        this.props.updateLeaderboard(newTableData);\r\n      })\r\n      .catch(() => {\r\n        console.log('something went wrong');\r\n      });\r\n  };\r\n\r\n  localRouteChange = () => {\r\n    // If user has a rank of 8 or higher, they will be directed to the enter their leaderboard name.\r\n    if (this.state.rank < 9) {\r\n      this.setState({ localRoute: 'leaderboard' });\r\n    } else {\r\n      this.props.endGame();\r\n    }\r\n  };\r\n  onNameChange = e => {\r\n    // Ignore certain types of user input when entering leaderboard name.\r\n    this.setState({ name: e.target.value.replace(/[^a-zA-Z0-9]/gi, '') });\r\n  };\r\n  onKeyDown = e => {\r\n    if (e.key === 'Enter') {\r\n      this.onSubmit();\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"summary-content\">\r\n        {this.state.localRoute === 'score' ? (\r\n          <div>\r\n            <h2>Your final score is:</h2>\r\n            <h1> {this.props.score}</h1>\r\n            <input\r\n              type=\"button\"\r\n              className=\"standard-button points-button\"\r\n              value=\"Next\"\r\n              onClick={() => this.localRouteChange()}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div className=\"leaderboard-confirm\">\r\n            <h1>You made it on the leaderboard!</h1>\r\n            <h2>Enter your leaderboard name:</h2>\r\n            <input\r\n              type=\"text\"\r\n              name=\"username\"\r\n              className=\"name-entry\"\r\n              value={this.state.name}\r\n              maxLength=\"20\"\r\n              onChange={this.onNameChange}\r\n              autoFocus={true}\r\n              onKeyDown={this.onKeyDown}\r\n            />\r\n            <input type=\"button\" className=\"standard-button\" onClick={this.onSubmit} value=\"Next\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst LeaderboardListItem = ({ rank, name, score }) => {\r\n  return (\r\n    <div className=\"entryStyling\">\r\n      <h3>{rank}</h3>\r\n      <h3>{name}</h3>\r\n      <h3>{score}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeaderboardListItem;\r\n","import React from 'react';\r\nimport LeaderboardListItem from './LeaderboardListItem';\r\n\r\nconst LeaderboardList = ({ leaders }) => {\r\n  return (\r\n    <div>\r\n      <LeaderboardListItem leaders={leaders} />\r\n      {leaders.slice(0, 8).map((user, i) => {\r\n        // Grab the top 8 ranks of the leaders and display in table.\r\n        return <LeaderboardListItem key={i} rank={i + 1} name={user.name} score={user.score} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeaderboardList;\r\n","import React from 'react';\r\nimport './Leaderboard.css';\r\nimport LeaderboardList from './LeaderboardList.js';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nconst Leaderboard = ({ leaders }) => {\r\n  return (\r\n    <div className=\"leaderboardContainer\">\r\n      <h3>LEADERBOARD</h3>\r\n      {leaders.length > 7 ? (\r\n        <div className=\"leaderboardTable\">\r\n          <LeaderboardList leaders={leaders} />\r\n        </div> \r\n      ) : (\r\n        <div className=\"loadingContainer\">\r\n          <Loader type=\"Oval\" color=\"#31D5FF\" height=\"50\" width=\"50\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Leaderboard;\r\n","import React from 'react';\r\nimport { Circle } from \"rc-progress\";\r\nimport \"rc-progress/assets/index.css\";\r\nimport \"./Timer.css\";\r\n\r\nconst Timer = ({percent, color, timer}) => {\r\n  const circleContainerStyle = {\r\n    width: \"184px\",\r\n    margin: \"32px auto\",\r\n    position: \"relative\",\r\n    top: \"0px\",\r\n    left: \"0px\"\r\n  };\r\n\r\n  \r\n  const circleStyle = {\r\n    position: \"relative\",\r\n    top: \"0px\"\r\n  };\r\n\r\n  return (\r\n        <div style={circleContainerStyle}>\r\n          <div style={circleStyle}>\r\n            <Circle\r\n              percent={percent}\r\n              strokeWidth=\"4\"\r\n              strokeLinecap=\"round\"\r\n              strokeColor={color}\r\n            />\r\n          </div>\r\n          <div className=\"timerStyle\">\r\n            <h2>{timer}</h2>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  \r\n\r\nexport default Timer\r\n","import React from 'react';\r\nimport './ActiveGame.css';\r\nimport Timer from './Timer'\r\n\r\nconst ActiveGame = ({ score, timer, endGame, color, percent }) => {\r\n  return (\r\n    <div className=\"side-container-content\">\r\n      <div className=\"point-container\">\r\n        <h3>SCORE</h3>\r\n        <h2>{score}</h2>\r\n      </div>\r\n      <div className=\"timer-container\">\r\n        <h3>TIMER</h3>\r\n         <Timer color={color} percent={percent} timer={timer} />\r\n      </div>\r\n      <div className=\"button-container\">\r\n        <input type=\"button\" className=\"standard-button exit-button\" value=\"End Game\" onClick={endGame} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActiveGame;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Question from './components/Question/Question';\nimport Countdown from './components/Countdown/Countdown';\nimport Summary from './components/Summary/Summary';\nimport Leaderboard from './components/SideContainer/Leaderboard/Leaderboard';\nimport SideContainer from './components/SideContainer/ActiveGame/ActiveGame';\n\nclass App extends Component {\n  state = {\n    timer: 20,\n    choice1: '',\n    choice2: '',\n    choice3: '',\n    choice4: '',\n    score: 0,\n    color: '#00E7D0',\n    percent: 0,\n    gameStatus: 'notStarted',\n    correctAnswer: '',\n    question: '',\n    questionCount: 0,\n    leaders: [],\n    questionDb: {\n      category: '',\n      type: '',\n      difficulty: '',\n      question: '',\n      correctAnswer: '',\n      totalCorrectAnswers: '',\n      id: ''\n    }\n    //  leaders: 0\n  };\n\n  componentDidMount() {\n    fetch('https://trivia-app-123.herokuapp.com/leaderboard')\n      .then(res => res.json())\n      .then(leaders => this.setState({ leaders }))\n      .catch(err => console.log('Unable to connect to server'));\n  }\n\n  handleGameStatusChange = value => {\n    if (value === 'countdown') {\n      this.fetchQuestions();\n    }\n    this.setState({ gameStatus: value });\n  };\n\n  gameStart = () => {\n    this.setState({ questionCount: 0 });\n    this.setState({ score: 0 });\n    this.loadQuestion();\n    this.handleGameStatusChange('ongoing');\n  };\n\n  restartTimer = () => {\n    this.stopTimer();\n    this.startTimer();\n  };\n\n  startTimer = () => {\n    this.setState({ timer: 20 });\n    this.updatePercent();\n    this.timer = setInterval(\n      () => this.countdown(),\n      // this.setState({\n      //   timer: this.state.timer - 1\n      // }),\n      1000\n    );\n\n    // this.interval = setInterval(e => this.countDown(), 1000);\n  };\n\n  countdown = () => {\n    if (this.state.timer > 0) {\n      this.setState({\n        timer: this.state.timer - 1\n      });\n      this.updatePercent();\n    } else if (this.state.timer === 0) {\n      this.loadQuestion();\n      this.restartTimer();\n    }\n  };\n\n  updateScore = () => {\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  updatePercent = () => {\n    if (this.state.timer < 4) {\n      this.setState({ color: '#FF487D' });\n    } else if (this.state.timer < 8) {\n      this.setState({ color: '#FAEF00' });\n    } else {\n      this.setState({ color: '#00E7D0' });\n    }\n    let x = this.state.timer * 5;\n    this.setState({ percent: x });\n  };\n  stopTimer = () => {\n    clearInterval(this.timer);\n  };\n\n  updateLeaderboard = newTableData => {\n    debugger;\n    this.setState({ leaders: newTableData });\n    this.endGame();\n  };\n\n  loadQuestion = () => {\n    this.restartTimer();\n    let i = this.state.questionCount;\n    if (this.state.questionCount === 10) {\n      this.stopTimer();\n      this.handleGameStatusChange('summary');\n      return;\n    }\n    for (i; i < 10; ) {\n      this.setState({ question: this.state.questionDb[i].question });\n      this.setState({ correctAnswer: this.state.questionDb[i].correctAnswer });\n      this.setState({ questionCount: this.state.questionCount + 1 });\n      this.setState({ choice1: this.state.questionDb[i].allAnswers[0] });\n      this.setState({ choice2: this.state.questionDb[i].allAnswers[1] });\n      this.setState({ choice3: this.state.questionDb[i].allAnswers[2] });\n      this.setState({ choice4: this.state.questionDb[i].allAnswers[3] });\n      return;\n      // console.log(this.state.correctAnswer);\n    }\n  };\n\n  fetchQuestions = () => {\n    fetch('https://opentdb.com/api.php?amount=10&type=multiple&encode=url3986') // using Open Triva API to grab different questions.\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          questionDb: data.results.map((item, index) => ({\n            category: item.category,\n            question: item.question,\n            correctAnswer: item.correct_answer,\n            allAnswers: item.incorrect_answers.concat(item.correct_answer)\n          }))\n        });\n      })\n      .then(() => {\n        // shuffling the questions for each answer to prevent the correct answer from being in the same place.\n        this.setState({\n          questionDb: this.state.questionDb.map(item => {\n            item.allAnswers = this.shuffleQuestions(item.allAnswers);\n            return item;\n          })\n        });\n      });\n\n    //this.state.questionDb.allAnswers.sort(() => .5 - Math.random());\n    setTimeout(() => {\n      this.loadQuestion();\n    }, 5000);\n  };\n\n  shuffleQuestions = array => {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  };\n\n  endGame = () => {\n    this.handleGameStatusChange('notStarted');\n    this.setState({ questionCount: 0 });\n    this.setState({ points: 0 });\n  };\n\n  render() {\n    let {\n      question,\n      timer,\n      color,\n      percent,\n      score,\n      correctAnswer,\n      choice1,\n      choice2,\n      choice3,\n      choice4,\n      questionCount,\n      leaders\n    } = this.state;\n    return (\n      <div className=\"grid-container\">\n        <div className=\"main-container\">\n          {this.state.gameStatus === 'notStarted' ? (\n            <div className=\"start-content\">\n              <h1>Trivia Challenge</h1>\n              <h2>Can you make it on the leaderboard?</h2>\n              <input\n                type=\"button\"\n                value=\"Start\"\n                className=\"standard-button\"\n                onClick={() => this.handleGameStatusChange('countdown')}\n              />\n            </div>\n          ) : this.state.gameStatus === 'countdown' ? (\n            <Countdown gameStart={this.gameStart} />\n          ) : this.state.gameStatus === 'ongoing' ? (\n            <Question\n              question={question}\n              choice1={choice1}\n              choice2={choice2}\n              choice3={choice3}\n              choice4={choice4}\n              questionCount={questionCount}\n              loadQuestion={this.loadQuestion}\n              correctAnswer={correctAnswer}\n              stopTimer={this.stopTimer}\n              updateScore={this.updateScore}\n            />\n          ) : (\n            <div className=\"summary-content\">\n              <Summary\n                endGame={this.endGame}\n                updateLeaderboard={this.updateLeaderboard}\n                score={score}\n                handleGameStatusChange={this.handleGameStatusChange}\n                leaders={leaders}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"side-container\">\n          {this.state.gameStatus === 'ongoing' ? (\n            <SideContainer endGame={this.endGame} color={color} percent={percent} timer={timer} score={score} />\n          ) : (\n            <Leaderboard leaders={leaders} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}